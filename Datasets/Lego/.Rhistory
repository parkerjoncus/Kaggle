Train <- dataTrain[inTrain,]
Test <- dataTrain[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
rf.model <- randomForest(label ~ ., data = Train, ntree = 20, nodesize = 10)
rf.predict <- predict(rf.model, Test)
print(rf.cm <- confusionMatrix(rf.predict, Test$label))
dataTest <- cbind(Prediction = predict(rf.model, dataTest), dataTest)
dataTest$Prediction <- as.double(dataTest$Prediction)
dataTest$Prediction <- as.double(dataTest$Prediction)-1
plotTest <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTest)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="red", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTest(1:10)
plotTest(1:100)
submission1<- data.frame(dataTest$Prediction)
View(submission1)
row.names(dataTest)
submission1<- data.frame(row.names(dataTest),dataTest$Prediction)
?data.frame
colnames(submission1)<-c("ImageId","Label")
?write.csv()
write.csv(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv")
?write.csv()
submission1$ImageId<-as.integer(submission1$ImageId)
colnames(submission1)<-c("ImageId","Label")
write.csv(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv")
?write.csv2
write.csv2(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", row.names = False)
write.csv2(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", row.names = false)
write.csv2(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", row.names = FALSE)
write.csv2(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", sep = ",", row.names = FALSE)
write.csv(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", sep = ",", row.names = FALSE)
write.csv(submission1, file = "~/Desktop/Kaggle/digit-recognizer/submission1.csv", row.names = FALSE)
set.seed(34543)
dataTrain <- read_csv("~/Desktop/Kaggle/digit-recognizer/train.csv")
dataTest <- read_csv("~/Desktop/Kaggle/digit-recognizer/test.csv")
barplot(table(dataTrain[,1]), col=rainbow(10, 0.5), main="n Digits in Train")
plotTrain <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTrain)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="white", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTrain(1:10)
dataTrain$label <- factor(dataTrain$label)
inTrain <- createDataPartition(y = dataTrain$label, p = trainPct, list = FALSE)
Train <- dataTrain[inTrain,]
Test <- dataTrain[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
rf.model <- randomForest(label ~ ., data = Train, ntree = 50, nodesize = 10)
library(readr)
library(caret)
library(tensorflow)
library(randomForest)
trainPct <- .8
testPct <- 1 - trainPct
set.seed(34543)
dataTrain <- read_csv("~/Desktop/Kaggle/digit-recognizer/train.csv")
dataTest <- read_csv("~/Desktop/Kaggle/digit-recognizer/test.csv")
dataTrain <- dataTrain[sample(1:nrow(dataTrain), 0.1*nrow(dataTrain), replace = FALSE), ]
barplot(table(dataTrain[,1]), col=rainbow(10, 0.5), main="n Digits in Train")
plotTrain <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTrain)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="white", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTrain(1:10)
dataTrain$label <- factor(dataTrain$label)
inTrain <- createDataPartition(y = dataTrain$label, p = trainPct, list = FALSE)
Train <- dataTrain[inTrain,]
Test <- dataTrain[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
rf.model <- randomForest(label ~ ., data = Train, ntree = 100, nodesize = 50)
rf.predict <- predict(rf.model, Test)
print(rf.cm <- confusionMatrix(rf.predict, Test$label))
rf.model <- randomForest(label ~ ., data = Train, ntree = 200, nodesize = 50)
rf.predict <- predict(rf.model, Test)
print(rf.cm <- confusionMatrix(rf.predict, Test$label))
library(readr)
library(caret)
library(tensorflow)
library(randomForest)
trainPct <- .8
testPct <- 1 - trainPct
set.seed(34543)
dataTrain <- read_csv("~/Desktop/Kaggle/digit-recognizer/train.csv")
dataTest <- read_csv("~/Desktop/Kaggle/digit-recognizer/test.csv")
barplot(table(dataTrain[,1]), col=rainbow(10, 0.5), main="n Digits in Train")
plotTrain <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTrain)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="white", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTrain(1:10)
dataTrain$label <- factor(dataTrain$label)
inTrain <- createDataPartition(y = dataTrain$label, p = trainPct, list = FALSE)
Train <- dataTrain[inTrain,]
Test <- dataTrain[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
rf.model <- randomForest(label ~ ., data = Train, ntree = 50, nodesize = 20)
rf.predict <- predict(rf.model, Test)
print(rf.cm <- confusionMatrix(rf.predict, Test$label))
dataTest <- cbind(Prediction = predict(rf.model, dataTest), dataTest)
dataTest$Prediction <- as.double(dataTest$Prediction)-1
plotTest <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTest)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="red", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTest(1:100)
library(readr)
library(caret)
library(tensorflow)
library(randomForest)
library(h2o)
library(generics)
trainPct <- .8
testPct <- 1 - trainPct
set.seed(34543)
dataTrain <- read_csv("~/Documents/GitHub/Kaggle/Competitions/digit-recognizer/data/train.csv")
dataTest <- read_csv("~/Documents/GitHub/Kaggle/Competitions/digit-recognizer/data/test.csv")
barplot(table(dataTrain[,1]), col=rainbow(10, 0.5), main="n Digits in Train")
plotTrain <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTrain)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="white", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTrain(1:10)
dataTrain$label <- factor(dataTrain$label)
inTrain <- createDataPartition(y = dataTrain$label, p = trainPct, list = FALSE)
Train <- dataTrain[inTrain,]
Test <- dataTrain[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
##Random Forrest
rf.model <- randomForest(label ~ ., data = Train, ntree = 50, nodesize = 20)
rf.predict <- predict(rf.model, Test)
print(rf.cm <- confusionMatrix(rf.predict, Test$label))
dataTest <- cbind(Prediction = predict(rf.model, dataTest), dataTest)
dataTest$Prediction <- as.numeric(dataTest$Prediction)-1
plotTest <- function(images){
op <- par(no.readonly=TRUE)
x <- ceiling(sqrt(length(images)))
par(mfrow=c(x, x), mar=c(.1, .1, .1, .1))
matrixData <- as.matrix(dataTest)
for (i in images){ #reverse and transpose each matrix to rotate images
m <- matrix(matrixData[i,-1], nrow=28, byrow=TRUE)
m <- apply(m, 2, rev)
image(t(m), col=grey.colors(255), axes=FALSE)
text(0.05, 0.2, col="red", cex=1.2, matrixData[i, 1])
}
par(op) #reset the original graphics parameters
}
plotTest(1:100)
#Deep Nural Network
h2o.init()
h2o.train <- as.h2o(Train)
h2o.test <- as.h2o(Test)
h2o.model <- h2o.deeplearning(x = setdiff(names(Train), c("label")),
y = "label",
training_frame = h2o.train,
standardize = TRUE,         # standardize data
hidden = c(100, 100),       # 2 layers of 00 nodes each
rate = 0.05,                # learning rate
epochs = 10,                # iterations/runs over data
seed = 1234                 # reproducability seed
)
h2o.predictions <- as.data.frame(h2o.predict(h2o.model, h2o.test))
print(h2o.cm <- confusionMatrix(h2o.predictions$predict, Test$label))
temp <- as.data.frame(h2o.predict(h2o.model, as.h2o(dataTest)))
View(temp)
typeof(temp$predict)
dataTest$Prediction <- as.numeric(temp$predict)-1
plotTest(1:100)
submission2<- data.frame(row.names(dataTest),dataTest$Prediction)
colnames(submission2)<-c("ImageId","Label")
submission2$ImageId<-as.integer(submission2$ImageId)
write.csv(submission2, file = "~/Documents/GitHub/Kaggle/Competitions/digit-recognizer/submissions/NNsubmission1.csv", row.names = FALSE)
library(caret)
install.packages("magick")
library(magick)
tiger <- image_read_svg('~/Documents/Github/Kaggle/Datasets/Lego/harry-potter/0001')
install.packages("rsvg")
library(rsvg)
tiger <- image_read_svg('~/Documents/Github/Kaggle/Datasets/Lego/harry-potter/0001')
print(tiger)
setwd("~/")
tiger <- image_read_svg('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001')
tiger <- image_read_svg('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
print(tiger)
?image_read)svg
?image_read_svg
tiger <- image_read('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
print(tiger)
summary(tiger)
tiger2 <- as.data.frame(tiger)
tiger2 <- as.raw(tiger)
library(jpeg)
tiger <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
print(tiger)
tiger2 <- as.raw(tiger)
View(tiger2)
View(tiger)
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
?readJPEG
View(harrypotter1)
t
t
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg', native = TRUE)
View(harrypotter1)
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
plot(1:4,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
?plot
##plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
library(caret)
library(jpeg)
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
##plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
##plot(1:2,1:2, type='n')
plot.new
rasterImage(harrypotter1, 1, 1, 2, 2)
plot(1:2,1:4, type='n')
plot(1:2,2:2:4, type='n')
plot(1:2,0:2:4, type='n')
plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
plot(1:2,1:2, type='n')
rasterImage(harrypotter1, 1, 1, 2, 2)
library(readr)
index <- read_csv("Documents/GitHub/Kaggle/Datasets/Lego/index.csv")
View(index)
metadata <- read_csv("Documents/GitHub/Kaggle/Datasets/Lego/metadata.csv")
View(index)
View(metadata)
metadata$X1 <- NULL
index$X1 <- NULL
train<- index[index$`train-valid`=="train",]
View(train)
test<- index[index$`train-valid`=="valid"]
View(test)
test<- index[index$`train-valid`=="valid"]
test<- index[index$`train-valid`=="valid",]
View(train)
View(test)
for (i=1:length(train$class_id)){
print(i)
}
for (i in 1:length(train$class_id)){
print(i)
}
harrypotter1 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
harrypotter2 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/002.jpg')
View(harrypotter2)
harrypotter2 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0002/002.jpg')
View(harrypotter2)
harrypotter2 <- readJPEG('~/Documents/GitHub/Kaggle/Datasets/Lego/marvel/0002/002.jpg')
View(harrypotter2)
View(harrypotter1)
rasterImage(harrypotter2, 1, 1, 2, 2)
data.frame(c(1,2,3,4,5))
as.vector(data.frame(c(1,2,3,4,5)))
?data.frame
data.frame(c(1,2,3),c(4,5,6))
View(data.frame(c(1,2,3),c(4,5,6)))
as.vector(data.frame(c(1,2,3),c(4,5,6)))
temp<-data.frame(c(1,2,3),c(4,5,6))
View(temp)
as.vector(temp)
?as.vector
as.vector(temp, mode = "list")
View(as.vector(temp))
View(as.vector(t(temp))
)
View(T(as.vector(t(temp))))
View(t(as.vector(t(temp))))
setwd("~/Documents/GitHub/Kaggle/Datasets/Lego")
library(caret)
library(jpeg)
library(readr)
setwd("~/Documents/GitHub/Kaggle/Datasets/Lego")
index <- read_csv("index.csv")
metadata <- read_csv("metadata.csv")
View(index)
View(metadata)
metadata$X1 <- NULL
index$X1 <- NULL
train<- index[index$`train-valid`=="train",]
test<- index[index$`train-valid`=="valid",]
JPEGToPixels <- function(imagePath){
image <- readJPEG(imagePath)
return(t(as.vector(t(image))))
}
temp <- JPEGToPixels("harry-potter/0001/001.jpg")
image <- readJPEG("harry-potter/0001/001.jpg")
temp <- t(as.vector(t(image)))
View(image)
temp <- t(as.vector(t(as.matrix(image))))
View(temp)
temp
View(temp)
temp[1:10,]
temp[,1:10]
temp[,1:100]
temp[1:2,1:100]
temp[1,1:100]
temp[2,1:100]
temp[0,1:100]
dim(temp)
?jpeg
?readJPEG
harrypotter1 <- jpeg('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
print(harrypotter1)
harrypotter1
harrypotter1 <- jpeg('~/Documents/GitHub/Kaggle/Datasets/Lego/harry-potter/0001/001.jpg')
View(harrypotter1)
image <- readJPEG(imagePath)
image
1:6:36
seq(1,36, 6)
image1<-mean(image[,1:6])
image1<-mean(image[:,1:6])
image1<-mean(image[,1:6])
?mean
image1<-mean(image[,1],image[,2])
image1<-mean(image$V1,image$V2)
image$V1
View(image)
image[,1]
as.data.frame(image)
image <- as.data.frame(image)
mean(image[,1:6])
mean(image$V1,image$V2)
rowMeans(image[,1:6])
newImage(data.frame())
newImage <- data.frame()
View(data.frame())
View(newImage)
CreateLowerResolution <- function(image){
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- rowMeans(image[,i:i+6])
}
}
lowerImage <- CreateLowerResolution(image)
CreateLowerResolution <- function(image){
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- rowMeans(image[,i:i+5])
}
}
lowerImage <- CreateLowerResolution(image)
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- rowMeans(image[,i:i+5])
}
}
lowerImage <- CreateLowerResolution(image)
typeof(image)
image<-as.data.frame(image)
typeof(image)
rowMeans(image[,i:i+5])
rowMeans(image[,1:1+5])
rowMeans(image[,1:(1+5)])
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- rowMeans(image[,i:(i+5)])
}
}
lowerImage <- CreateLowerResolution(image)
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- data.frame(rowMeans(image[,i:(i+5)]))
}
}
lowerImage <- CreateLowerResolution(image)
View(lowerImage)
lowerImage
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
newImage[,i] <- data.frame(rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
View(lowerImage)
rowmean <- rowMeans(image[,i:(i+5)])
View(rowmean)
?cbind
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
cbind(rowmean,rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
View(rowmean)
View(lowerImage)
lowerImage
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
for (i in 1:256){
cbind(newImage,rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- data.frame()
nrow(newImage) = 512
for (i in 1:256){
cbind(newImage,rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
?data.frame
?as.data.frame
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- as.data.frame(matrix(nrow = 512, ncol = 256))
nrow(newImage) = 512
for (i in 1:256){
cbind(newImage,rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
lowerImage <- CreateLowerResolution(image)
CreateLowerResolution <- function(image){
image<-as.data.frame(image)
newImage <- as.data.frame(matrix(nrow = 512, ncol = 256))
for (i in 1:256){
cbind(newImage,rowMeans(image[,i:(i+5)]))
}
return(newImage)
}
lowerImage <- CreateLowerResolution(image)
View(lowerImage)
